1.Table布局：通过Table元素将页面划分成诺干个单元格，将文字或图片元素放入单元格中，隐藏表格的边框从而实现布局，这种布局方式比较传统。
2.HTML+CSS布局(DIV+CSS)：主要通过CSS样式设置来布局文字或图片等元素，需要用到CSS盒子模型、盒子类型、CSS浮动、CSS定位、CSS背景图定位
等知识来布局，它比传统布局要复杂，目前是主流的布局方式

table布局和HTML+CSS布局(DIV+CSS)优缺点：

table表格布局
优点：布局容易、快捷、兼容性好。
缺点：改动不便，需重新调整，工作量大。
DIV+CSS。

优点：布局灵活、改动方便。
缺点：需考虑平台的兼容性，对制作人员技能要求较高。

PC及移动端页面适配方法

设备屏幕有多种不同的分辨率，页面适配方案有如下几种：

1、全适配：响应式布局+流体布局

2、移动端适配：

流体布局+少量响应式
基于rem的布局
流体布局

/流式布局：就是百分比布局，非固定像素，内容向两侧填充，理解成流动的布局，称为流式布局/
 /*视觉窗口：viewport,是移动端特有。这是一个虚拟的区域，承载网页的。
      承载关系：浏览器---->viewport---->网页
    */
    /*适配要求：
        1. 网页宽度必须和浏览器保持一致
        2. 默认显示的缩放比例和PC端保持（缩放比例1.0）
        3. 不允许用户自行缩放网页
        满足这些要求达到了适配，国际上通用的适配方案，标准的移动端适配方案。
    */
    /*适配设置：
        如果任何设置都没有，默认走的就是viewport的默认设置
        去设置新的viewport设置,达到适配要求。
        <meta name="viewport"> 设置视口的标签  在head里面并且应该紧接着编码设置
        viewport的功能：
        1. width    可以设置宽度   (device-width 当前设备的宽度)
        2. height   可以设置高度
        3. initial-scale  可以设置默认的缩放比例
        4. user-scalable  可以设置是否允许用户自行缩放
        5. maximum-scale  可以设置最大缩放比例
        6. minimum-scale  可以设置最小缩放比例
        在<meta name="viewport" content="" >  content="" 使用以上参数
        1. width=device-width   宽度一致比例是1.0
        2. initial-scale=1.0    宽度一致比例是1.0
        3. user-scalable=no     不允许用户自行缩放  （yes，no  1,0）
        标准适配方案：
        <meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=0">
        meta:vp + tab  快捷方式
        
3.响应式布局
响应式布局就是使用媒体查询的方式，通过查询浏览器宽度，不同的宽度应用不同的样式块，每个样式块对应的是该宽度下的布局方式，从而实现响应式布局。
响应式布局的页面可以适配多种终端屏幕（pc、平板、手机）
基于rem的布局
首先了解em单位，em单位是参照元素自身的文字大小来设置尺寸，rem指的是参照根节点的文字大小，根节点指的是html标签，设置html标签的文字大小，其他
的元素相关尺寸设置用rem，这样，所有元素都有了统一的参照标准，改变html文字的大小，就会改变所有元素用rem设置的尺寸大小。

5.Grid布局
grid 布局是W3C提出的一个二维布局系统，通过 display: grid 来设置使用，对于以前一些复杂的布局能够得到更简单的解决。本篇文章通过几个布局来对对
grid 布局进行一个简单的了解。目前，grid 仅仅只有 Edge使用前缀能够支持，为了更好地体验，可以使用 Chrome 浏览器，
在 chrome://flags 开启 #enable-experimental-web-platform-features 选项。
使用 grid-template-columns 属性创建一个 12 列的网格，每个列都是一个单位宽度（总宽度的 1/12 ）。（愚人码头注：其中， repeat(12, 1fr) 意思是 12 个重复的 1fr 值。 fr 是网格容器剩余空间的等分单位。）

使用 grid-template-rows 属性创建 3 行，第一行高度是 50px ，第二行高度是 350px 和第三行高度是 50px。

使用 grid-gap 属性在网格中的网格项之间添加一个间隙。
